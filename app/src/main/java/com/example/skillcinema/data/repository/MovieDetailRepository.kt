package com.example.skillcinema.data.repository

import android.util.Log
import com.example.skillcinema.data.*
import com.example.skillcinema.data.database.MovieDao
import com.example.skillcinema.data.database.MovieEntity
import com.example.skillcinema.network.MovieApiService
import kotlinx.coroutines.*
import retrofit2.HttpException
import java.io.IOException
import javax.inject.Inject

interface MovieDetailRepository {
    suspend fun getMovieDetails(movieId: Int): MovieDetailResponse?
    suspend fun getMovieCast(movieId: Int): List<ActorResponse>
    suspend fun getMovieGallery(movieId: Int): GalleryResponse
    suspend fun getSeasons(movieId: Int): SeasonsResponse
    suspend fun getSimilarMovies(movieId: Int): SimilarMoviesResponse
}

class MovieDetailRepositoryImpl @Inject constructor(
    private val apiService: MovieApiService,
    private val movieDao: MovieDao
) : MovieDetailRepository {

    private val repositoryScope = CoroutineScope(Dispatchers.IO + SupervisorJob())

    override suspend fun getMovieDetails(movieId: Int): MovieDetailResponse? {
        return withContext(repositoryScope.coroutineContext) {
            try {
                Log.d("MovieDetailRepository", "üì§ –ó–∞–ø—Ä–æ—Å —Ñ–∏–ª—å–º–∞ —Å ID: $movieId")

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É
                val cachedMovie = movieDao.getMovieById(movieId)
                if (cachedMovie != null) {
                    Log.d("MovieDetailRepository", "‚úÖ –§–∏–ª—å–º –Ω–∞–π–¥–µ–Ω –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ: ${cachedMovie.nameRu}")
                    return@withContext cachedMovie.toMovieDetailResponse()
                }

                Log.d("MovieDetailRepository", "üåê –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–∏–ª—å–º –∏–∑ API...")

                var movie: MovieDetailResponse? = null

                // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–æ 3 —Ä–∞–∑ –ø—Ä–∏ `TimeoutCancellationException`
                repeat(3) { attempt ->
                    try {
                        movie = withTimeoutOrNull(7000) { apiService.getMovieDetails(movieId) }
                        if (movie != null) {
                            Log.d("MovieDetailRepository", "‚úÖ –§–∏–ª—å–º –∑–∞–≥—Ä—É–∂–µ–Ω —Å –ø–æ–ø—ã—Ç–∫–∏ ${attempt + 1}")
                            return@repeat
                        } else {
                            Log.w("MovieDetailRepository", "‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ ${attempt + 1} –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø–æ–≤—Ç–æ—Ä—è–µ–º...")
                            delay(2000)
                        }
                    } catch (e: TimeoutCancellationException) {
                        Log.w("MovieDetailRepository", "‚è≥ –¢–∞–π–º-–∞—É—Ç –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ ${attempt + 1}, –ø–æ–≤—Ç–æ—Ä—è–µ–º...")
                    }
                }

                if (movie == null) {
                    Log.e("MovieDetailRepository", "‚ùå –§–∏–ª—å–º –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫")
                    return@withContext null
                }

                Log.d("MovieDetailRepository", "‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω —Ñ–∏–ª—å–º: ${movie!!.nameRu}")

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É
                movieDao.insertMovie(movie!!.toMovieEntity())
                Log.d("MovieDetailRepository", "üíæ –§–∏–ª—å–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É")

                return@withContext movie
            } catch (e: HttpException) {
                Log.e("MovieDetailRepository", "‚ùå HTTP –û—à–∏–±–∫–∞: ${e.code()} - ${e.message()}", e)
                null
            } catch (e: IOException) {
                Log.e("MovieDetailRepository", "‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${e.message}", e)
                null
            } catch (e: CancellationException) {
                Log.e("MovieDetailRepository", "‚è≥ –ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω", e)
                null
            } catch (e: Exception) {
                Log.e("MovieDetailRepository", "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∏–ª—å–º–∞: ${e.message}", e)
                null
            }
        }
    }

    override suspend fun getMovieCast(movieId: Int): List<ActorResponse> =
        withContext(Dispatchers.IO) {
            try {
                Log.d("MovieDetailRepository", "üé≠ –ó–∞–ø—Ä–æ—Å –∞–∫—Ç–µ—Ä–æ–≤ –¥–ª—è —Ñ–∏–ª—å–º–∞ ID: $movieId")
                apiService.getMovieCast(movieId)
            } catch (e: Exception) {
                Log.e("MovieDetailRepository", "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫—Ç–µ—Ä–æ–≤: ${e.message}")
                emptyList()
            }
        }

    override suspend fun getMovieGallery(movieId: Int): GalleryResponse =
        withContext(Dispatchers.IO) {
            try {
                Log.d("MovieDetailRepository", "üñºÔ∏è –ó–∞–ø—Ä–æ—Å –≥–∞–ª–µ—Ä–µ–∏ –¥–ª—è —Ñ–∏–ª—å–º–∞ ID: $movieId")
                apiService.getMovieGallery(movieId)
            } catch (e: Exception) {
                Log.e("MovieDetailRepository", "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–∞–ª–µ—Ä–µ–∏: ${e.message}")
                GalleryResponse(total = 0, items = emptyList())
            }
        }

    override suspend fun getSeasons(movieId: Int): SeasonsResponse =
        withContext(Dispatchers.IO) {
            try {
                Log.d("MovieDetailRepository", "üì∫ –ó–∞–ø—Ä–æ—Å —Å–µ–∑–æ–Ω–æ–≤ –¥–ª—è —Ñ–∏–ª—å–º–∞ ID: $movieId")
                apiService.getSeasons(movieId)
            } catch (e: Exception) {
                Log.e("MovieDetailRepository", "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ–∑–æ–Ω–æ–≤: ${e.message}")
                SeasonsResponse(0, emptyList())
            }
        }

    override suspend fun getSimilarMovies(movieId: Int): SimilarMoviesResponse =
        withContext(Dispatchers.IO) {
            try {
                Log.d("MovieDetailRepository", "üé¨ –ó–∞–ø—Ä–æ—Å –ø–æ—Ö–æ–∂–∏—Ö —Ñ–∏–ª—å–º–æ–≤ –¥–ª—è ID: $movieId")
                apiService.getSimilarMovies(movieId)
            } catch (e: Exception) {
                Log.e("MovieDetailRepository", "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Ö–æ–∂–∏—Ö —Ñ–∏–ª—å–º–æ–≤: ${e.message}")
                SimilarMoviesResponse(emptyList())
            }
        }
}

// ‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è `MovieEntity` ‚Üí `MovieDetailResponse`
private fun MovieEntity.toMovieDetailResponse(): MovieDetailResponse {
    return MovieDetailResponse(
        kinopoiskId = this.movieId,
        nameRu = this.nameRu,
        nameOriginal = this.nameOriginal,
        year = this.year,
        posterUrl = this.posterUrl,
        description = null,
        ratingKinopoisk = this.rating,
        genres = emptyList(),
        countries = emptyList(),
        filmLength = null,
        serial = false,
        seasonsCount = null,
        ratingAgeLimits = null
    )
}

// ‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è `MovieDetailResponse` ‚Üí `MovieEntity`
private fun MovieDetailResponse.toMovieEntity(): MovieEntity {
    return MovieEntity(
        movieId = this.kinopoiskId,
        nameRu = this.nameRu ?: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
        nameOriginal = this.nameOriginal ?: "",
        year = this.year ?: "",
        posterUrl = this.posterUrl ?: "",
        rating = this.ratingKinopoisk ?: 0.0,
        isWatched = false,
        isFavorite = false
    )
}